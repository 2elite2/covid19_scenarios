version: ~> 1.0

os: linux
dist: bionic

branches:
  only:
    - master
    - release

language: node_js

cache:
  yarn: true
  directories:
    - node_modules

install:
  - yarn install --frozen-lockfile

before_script:
  - cp .env.example .env

script:
  - yarn test

before_deploy:
  - yarn prod

deploy:
  - provider: s3
    edge: true
    detect_encoding: true
    dot_match: true
    local_dir: .build/production/web
    cache_control:
      - 'public, max-age=31536000: *'
      - 'no-cache: *.html'
    region: $AWS_REGION_STAGING
    access_key_id: $AWS_ACCESS_KEY_ID_STAGING
    secret_access_key: $AWS_SECRET_ACCESS_KEY_STAGING
    bucket: $AWS_S3_BUCKET_STAGING
    on:
      branch: master

  - provider: s3
    edge: true
    detect_encoding: true
    dot_match: true
    local_dir: .build/production/web
    cache_control:
      - 'public, max-age=31536000: *'
      - 'no-cache: *.html'
    region: $AWS_REGION_PRODUCTION
    access_key_id: $AWS_ACCESS_KEY_ID_PRODUCTION
    secret_access_key: $AWS_SECRET_ACCESS_KEY_PRODUCTION
    bucket: $AWS_S3_BUCKET_PRODUCTION
    on:
      branch: release

after_deploy:
  - yarn global add travis-ci-cloudfront-invalidation@1.1.0
  - >
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset
    set -o pipefail
    trap "exit" INT

    if [ "$TRAVIS_BRANCH" == "release" ]; then
      travis-ci-cloudfront-invalidation \
        -b $TRAVIS_BRANCH -p $TRAVIS_PULL_REQUEST \
        -a $AWS_ACCESS_KEY_ID_PRODUCTION \
        -s $AWS_SECRET_ACCESS_KEY_PRODUCTION \
        -c $AWS_CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION \
        -i '/*'
    elif [ "$TRAVIS_BRANCH" == "master" ]; then
      travis-ci-cloudfront-invalidation \
        -b $TRAVIS_BRANCH -p $TRAVIS_PULL_REQUEST \
        -a $AWS_ACCESS_KEY_ID_STAGING \
        -s $AWS_SECRET_ACCESS_KEY_STAGING \
        -c $AWS_CLOUDFRONT_DISTRIBUTION_ID_STAGING \
        -i '/*'
    fi
